;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 2.0.4
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant PJ_VERSION 470)

(cffi:defcvar ("pj_release" pj_release)
 :pointer)

(cl:defconstant RAD_TO_DEG 57.29577951308232d0)

(cl:defconstant DEG_TO_RAD .0174532925199432958d0)

(cffi:defcvar ("pj_errno" pj_errno)
 :int)

(cffi:defcstruct projUV
	(u :double)
	(v :double))

(cffi:defcfun ("pj_fwd" pj_fwd) projUV
  (arg0 projUV)
  (arg1 :pointer))

(cffi:defcfun ("pj_inv" pj_inv) projUV
  (arg0 projUV)
  (arg1 :pointer))

(cffi:defcfun ("pj_transform" pj_transform) :int
  (src :pointer)
  (dst :pointer)
  (point_count :long)
  (point_offset :int)
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("pj_datum_transform" pj_datum_transform) :int
  (src :pointer)
  (dst :pointer)
  (point_count :long)
  (point_offset :int)
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("pj_geocentric_to_geodetic" pj_geocentric_to_geodetic) :int
  (a :double)
  (es :double)
  (point_count :long)
  (point_offset :int)
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("pj_geodetic_to_geocentric" pj_geodetic_to_geocentric) :int
  (a :double)
  (es :double)
  (point_count :long)
  (point_offset :int)
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("pj_compare_datums" pj_compare_datums) :int
  (srcdefn :pointer)
  (dstdefn :pointer))

(cffi:defcfun ("pj_apply_gridshift" pj_apply_gridshift) :int
  (arg0 :string)
  (arg1 :int)
  (point_count :long)
  (point_offset :int)
  (x :pointer)
  (y :pointer)
  (z :pointer))

(cffi:defcfun ("pj_deallocate_grids" pj_deallocate_grids) :void)

(cffi:defcfun ("pj_is_latlong" pj_is_latlong) :int
  (arg0 :pointer))

(cffi:defcfun ("pj_is_geocent" pj_is_geocent) :int
  (arg0 :pointer))

(cffi:defcfun ("pj_pr_list" pj_pr_list) :void
  (arg0 :pointer))

(cffi:defcfun ("pj_free" pj_free) :void
  (arg0 :pointer))

(cffi:defcfun ("pj_set_finder" pj_set_finder) :void
  (arg0 :pointer))

(cffi:defcfun ("pj_set_searchpath" pj_set_searchpath) :void
  (count :int)
  (path :pointer))

(cffi:defcfun ("pj_init" pj_init) :pointer
  (arg0 :int)
  (arg1 :pointer))

(cffi:defcfun ("pj_init_plus" pj_init_plus) :pointer
  (arg0 :string))

(cffi:defcfun ("pj_get_def" pj_get_def) :string
  (arg0 :pointer)
  (arg1 :int))

(cffi:defcfun ("pj_latlong_from_proj" pj_latlong_from_proj) :pointer
  (arg0 :pointer))

(cffi:defcfun ("pj_malloc" pj_malloc) :pointer
  (arg0 :pointer))

(cffi:defcfun ("pj_dalloc" pj_dalloc) :void
  (arg0 :pointer))

(cffi:defcfun ("pj_strerrno" pj_strerrno) :string
  (arg0 :int))

(cffi:defcfun ("pj_get_errno_ref" pj_get_errno_ref) :pointer)

(cffi:defcfun ("pj_get_release" pj_get_release) :string)

(cffi:defcfun ("pj_acquire_lock" pj_acquire_lock) :void)

(cffi:defcfun ("pj_release_lock" pj_release_lock) :void)

(cffi:defcfun ("pj_cleanup_lock" pj_cleanup_lock) :void)


